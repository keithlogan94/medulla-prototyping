
syntax = "proto3";

option csharp_namespace = "GrpcDatabase";
option go_package = "./database";

package database;


service DatabaseSvc {
  // Create databases rpcs
  rpc CreateDatabase (CreateDatabaseRequest) returns (CreateDatabaseResponse) {}
  rpc GetDatabases (GetDatabasesRequest) returns (GetDatabasesResponse) {}
  rpc UpdateDatabases (UpdateDatabasesRequest) returns (UpdateDatabasesResponse) {}
  rpc DeleteDatabases (DeleteDatabasesRequest) returns (DeleteDatabasesResponse) {}

  // Create model rpcs
  rpc CreateModel (CreateModelRequest) returns (CreateModelResponse) {}
  rpc GetModels (GetModelsRequest) returns (GetModelsResponse) {}
  rpc UpdateModels (UpdateModelsRequest) returns (UpdateModelsResponse) {}
  rpc DeleteModels (DeleteModelsRequest) returns (DeleteModelsResponse) {}

  // Query Models rpcs
  rpc QueryModel (QueryModelRequest) returns (QueryModelResponse) {}

}

message Database {
	string name = 1;
	// Security: querying user must contain role
	string role = 2;
	string collation = 3;
	string dialect = 4;
}

// Database Messages
message CreateDatabaseRequest {
	Database database = 1;
}

message CreateDatabaseResponse {
	string uuid = 1;
	Database database = 2;
}

message GetDatabasesRequest {
	repeated string name = 1;
}

message GetDatabasesResponse {
	repeated Database databases = 1;
}

message UpdateDatabasesRequest {
	string uuid = 1;
	Database database = 2;
}

message UpdateDatabasesResponse {
	string uuid = 1;
	Database database = 2;
}

message DeleteDatabasesRequest {
	string uuid = 1;
}

message DeleteDatabasesResponse {
	string uuid = 1;
}

message Column {
	string name = 1;
	// type will be an enum type
	string type = 2;
	bool allowNull = 3;
	string defaultValue = 4;
	bool primaryKey = 5;
	string fieldName = 6;
	bool unique = 7;
	string comment = 8;
	// Security: querying user must contain role
	string role = 9;
}

message Model {
	string name = 1;
	// Security: querying user must contain role
	string role = 2;
	repeated Column column = 3;
}


// Model Messages
message CreateModelRequest {
	Model model = 1;
}

message CreateModelResponse {
	string uuid = 1;
	Model model = 2;
}

message GetModelsRequest {
	string database = 1;
	string name = 2;
}

message GetModelsResponse {
	string uuid = 1;
	Model model = 2;
}

message UpdateModelsRequest {
	Model model = 1;
}

message UpdateModelsResponse {
	Model model = 1;
}

message DeleteModelsRequest {
	string database = 1;
	string model = 2;
}

message DeleteModelsResponse {
	string uuid = 1;
}

message Filter {
	string columnName = 1;
	// any of these can be null
	string columnContains = 2;
	string columnEquals = 3;
	// for comparison C# should choose the type of comparison based on the object type
	string columnGreaterThan = 4;
	string columnLessThan = 5;
	bool getAll = 6;
	bool getFirst = 7;
	bool getLast = 8;
	int32 numberRecordsToGet = 9;
}

message QueryModelRequest {
	string database = 1;
	string model = 2;
	bool withFilter = 4;
	repeated Filter filters = 5;
}

message QueryModelResponse {
	// return dynamic json response to allow for any table definition
	string json = 1;
}



