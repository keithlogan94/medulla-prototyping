// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseSvcClient is the client API for DatabaseSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseSvcClient interface {
	// Create databases rpcs
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error)
	GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error)
	UpdateDatabases(ctx context.Context, in *UpdateDatabasesRequest, opts ...grpc.CallOption) (*UpdateDatabasesResponse, error)
	DeleteDatabases(ctx context.Context, in *DeleteDatabasesRequest, opts ...grpc.CallOption) (*DeleteDatabasesResponse, error)
	// Create model rpcs
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	UpdateModels(ctx context.Context, in *UpdateModelsRequest, opts ...grpc.CallOption) (*UpdateModelsResponse, error)
	DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*DeleteModelsResponse, error)
	// Query Models rpcs
	QueryModel(ctx context.Context, in *QueryModelRequest, opts ...grpc.CallOption) (*QueryModelResponse, error)
}

type databaseSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseSvcClient(cc grpc.ClientConnInterface) DatabaseSvcClient {
	return &databaseSvcClient{cc}
}

func (c *databaseSvcClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error) {
	out := new(CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error) {
	out := new(GetDatabasesResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/GetDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) UpdateDatabases(ctx context.Context, in *UpdateDatabasesRequest, opts ...grpc.CallOption) (*UpdateDatabasesResponse, error) {
	out := new(UpdateDatabasesResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/UpdateDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) DeleteDatabases(ctx context.Context, in *DeleteDatabasesRequest, opts ...grpc.CallOption) (*DeleteDatabasesResponse, error) {
	out := new(DeleteDatabasesResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/DeleteDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/GetModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) UpdateModels(ctx context.Context, in *UpdateModelsRequest, opts ...grpc.CallOption) (*UpdateModelsResponse, error) {
	out := new(UpdateModelsResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/UpdateModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*DeleteModelsResponse, error) {
	out := new(DeleteModelsResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/DeleteModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseSvcClient) QueryModel(ctx context.Context, in *QueryModelRequest, opts ...grpc.CallOption) (*QueryModelResponse, error) {
	out := new(QueryModelResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseSvc/QueryModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseSvcServer is the server API for DatabaseSvc service.
// All implementations must embed UnimplementedDatabaseSvcServer
// for forward compatibility
type DatabaseSvcServer interface {
	// Create databases rpcs
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error)
	GetDatabases(context.Context, *GetDatabasesRequest) (*GetDatabasesResponse, error)
	UpdateDatabases(context.Context, *UpdateDatabasesRequest) (*UpdateDatabasesResponse, error)
	DeleteDatabases(context.Context, *DeleteDatabasesRequest) (*DeleteDatabasesResponse, error)
	// Create model rpcs
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	UpdateModels(context.Context, *UpdateModelsRequest) (*UpdateModelsResponse, error)
	DeleteModels(context.Context, *DeleteModelsRequest) (*DeleteModelsResponse, error)
	// Query Models rpcs
	QueryModel(context.Context, *QueryModelRequest) (*QueryModelResponse, error)
	mustEmbedUnimplementedDatabaseSvcServer()
}

// UnimplementedDatabaseSvcServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseSvcServer struct {
}

func (UnimplementedDatabaseSvcServer) CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedDatabaseSvcServer) GetDatabases(context.Context, *GetDatabasesRequest) (*GetDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabases not implemented")
}
func (UnimplementedDatabaseSvcServer) UpdateDatabases(context.Context, *UpdateDatabasesRequest) (*UpdateDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabases not implemented")
}
func (UnimplementedDatabaseSvcServer) DeleteDatabases(context.Context, *DeleteDatabasesRequest) (*DeleteDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabases not implemented")
}
func (UnimplementedDatabaseSvcServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedDatabaseSvcServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedDatabaseSvcServer) UpdateModels(context.Context, *UpdateModelsRequest) (*UpdateModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModels not implemented")
}
func (UnimplementedDatabaseSvcServer) DeleteModels(context.Context, *DeleteModelsRequest) (*DeleteModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModels not implemented")
}
func (UnimplementedDatabaseSvcServer) QueryModel(context.Context, *QueryModelRequest) (*QueryModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryModel not implemented")
}
func (UnimplementedDatabaseSvcServer) mustEmbedUnimplementedDatabaseSvcServer() {}

// UnsafeDatabaseSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseSvcServer will
// result in compilation errors.
type UnsafeDatabaseSvcServer interface {
	mustEmbedUnimplementedDatabaseSvcServer()
}

func RegisterDatabaseSvcServer(s grpc.ServiceRegistrar, srv DatabaseSvcServer) {
	s.RegisterService(&DatabaseSvc_ServiceDesc, srv)
}

func _DatabaseSvc_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/GetDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).GetDatabases(ctx, req.(*GetDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_UpdateDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).UpdateDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/UpdateDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).UpdateDatabases(ctx, req.(*UpdateDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_DeleteDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).DeleteDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/DeleteDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).DeleteDatabases(ctx, req.(*DeleteDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/GetModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_UpdateModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).UpdateModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/UpdateModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).UpdateModels(ctx, req.(*UpdateModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_DeleteModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).DeleteModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/DeleteModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).DeleteModels(ctx, req.(*DeleteModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseSvc_QueryModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseSvcServer).QueryModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseSvc/QueryModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseSvcServer).QueryModel(ctx, req.(*QueryModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseSvc_ServiceDesc is the grpc.ServiceDesc for DatabaseSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database.DatabaseSvc",
	HandlerType: (*DatabaseSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatabase",
			Handler:    _DatabaseSvc_CreateDatabase_Handler,
		},
		{
			MethodName: "GetDatabases",
			Handler:    _DatabaseSvc_GetDatabases_Handler,
		},
		{
			MethodName: "UpdateDatabases",
			Handler:    _DatabaseSvc_UpdateDatabases_Handler,
		},
		{
			MethodName: "DeleteDatabases",
			Handler:    _DatabaseSvc_DeleteDatabases_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _DatabaseSvc_CreateModel_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _DatabaseSvc_GetModels_Handler,
		},
		{
			MethodName: "UpdateModels",
			Handler:    _DatabaseSvc_UpdateModels_Handler,
		},
		{
			MethodName: "DeleteModels",
			Handler:    _DatabaseSvc_DeleteModels_Handler,
		},
		{
			MethodName: "QueryModel",
			Handler:    _DatabaseSvc_QueryModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Database.proto",
}
